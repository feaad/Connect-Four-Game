services:
  db:
    container_name: connect-four-db
    image: postgres:16.3-alpine3.20
    restart: always
    volumes:
      - ${ROOT_FOLDER}/db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: connect-four-redis
    image: redis:7.2.5-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: connect-four-backend
    build:
      context: ./backend
      args:
        - DEV=${DEBUG}
    restart: always
    volumes:
      - ${ROOT_FOLDER}/static:/vol/web
    environment:
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - API_PORT=${API_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DEBUG=${DEBUG}
      - LOAD_SAMPLE_DATA=${LOAD_SAMPLE_DATA}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
      - SUPERUSER_USERNAME=${SUPERUSER_USERNAME}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    container_name: connect-four-celery
    build:
      context: ./backend
      dockerfile: Dockerfile-Celery
      args:
        - DEV=${DEBUG}
    restart: always
    volumes:
      - ${ROOT_FOLDER}/static:/vol/web
    environment:
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - API_PORT=${API_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DEBUG=${DEBUG}
      - LOAD_SAMPLE_DATA=${LOAD_SAMPLE_DATA}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
      - SUPERUSER_USERNAME=${SUPERUSER_USERNAME}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started

  proxy:
    container_name: connect-four-proxy
    build:
      context: ./proxy
    restart: always
    volumes:
      - ${ROOT_FOLDER}/static:/vol/static
    ports:
      - ${API_PORT}:8000
    depends_on:
      backend:
        condition: service_started
